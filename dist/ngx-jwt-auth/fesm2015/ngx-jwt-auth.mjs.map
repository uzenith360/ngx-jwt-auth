{"version":3,"file":"ngx-jwt-auth.mjs","sources":["../../../projects/ngx-jwt-auth/src/lib/http-helpers.ts","../../../projects/ngx-jwt-auth/src/lib/environment-config.service.ts","../../../projects/ngx-jwt-auth/src/lib/user.service.ts","../../../projects/ngx-jwt-auth/src/lib/http-error.ts","../../../projects/ngx-jwt-auth/src/lib/auth.service.ts","../../../projects/ngx-jwt-auth/src/lib/auth-error.ts","../../../projects/ngx-jwt-auth/src/lib/jwt-auth.service.ts","../../../projects/ngx-jwt-auth/src/lib/auth-modal/auth-modal.component.ts","../../../projects/ngx-jwt-auth/src/lib/auth-modal/auth-modal.component.html","../../../projects/ngx-jwt-auth/src/lib/auth-dialog.service.ts","../../../projects/ngx-jwt-auth/src/lib/auth-manager.service.ts","../../../projects/ngx-jwt-auth/src/lib/auth-interceptor.service.ts","../../../projects/ngx-jwt-auth/src/lib/auth-http-interceptor-provider.ts","../../../projects/ngx-jwt-auth/src/lib/auth-manager.guard.ts","../../../projects/ngx-jwt-auth/src/lib/jwt-auth.module.ts","../../../projects/ngx-jwt-auth/src/public-api.ts","../../../projects/ngx-jwt-auth/src/ngx-jwt-auth.ts"],"sourcesContent":["\n\nimport { throwError, of } from 'rxjs';\nimport { retryWhen, delay, take, concatMap } from 'rxjs/operators';\n\nexport class HttpHelpers {\n  private static retryCount = 5;\n  private static retryableStatuses = [0, 500];\n\n  public static retry(): any {\n    return retryWhen(errors => errors.pipe(\n      delay(700),\n      take(HttpHelpers.retryCount),\n      concatMap((e, r) => {\n        if (HttpHelpers.retryableStatuses.indexOf(e.status) !== -1 && (r < HttpHelpers.retryCount - 1)) {\n          return of(e);\n        }\n\n        return throwError(e);\n      })\n    ));\n  }\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { EnvironmentConfig } from \"./environment-config.interface\";\n\nconst EnvironmentConfigService = new InjectionToken<EnvironmentConfig>('EnvironmentConfig');\n\nexport default EnvironmentConfigService;\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport User from './user.interface';\nimport { HttpHelpers } from './http-helpers';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport EnvironmentConfigService from './environment-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor(\n    @Inject(EnvironmentConfigService) private config: EnvironmentConfig,\n    private http: HttpClient,\n    ) { }\n\n  public getProfile(): Observable<{profile: User, message: string}> {\n    return this.http.get(this.config.getLoggedinUserProfileUrl)\n      .pipe(\n        HttpHelpers.retry(),\n        catchError((err, caught: Observable<User>) => {\n          switch (err.status) {\n            case 500:\n              return throwError({ message: 'Problem getting profile, please try again', status: err.status });\n            case 0:\n            default:\n              return throwError({ message: 'Problem getting profile, please check network and try again', status: err.status });\n          }\n        }),\n        map((profile: User) => {\n          return { message: 'Successfully logged in', profile };\n        })\n      );\n  }\n}\n\n","export default class HttpError extends Error {\n    constructor(status: string, public code?: number){\n        super(status);\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport JWT from './jwt.interface';\nimport { HttpHelpers } from './http-helpers';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport HttpError from './http-error';\nimport EnvironmentConfigService from './environment-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    @Inject(EnvironmentConfigService) private config: EnvironmentConfig,\n    private http: HttpClient,\n  ) { }\n\n  public auth(email: string, password: string): Observable<{ message: string, jwt: JWT }> {\n    return this.http.post(this.config.loginUrl, { email, password })\n      .pipe(\n        HttpHelpers.retry(),\n        catchError(\n          (err, caught: Observable<JWT>) => {\n            switch (err.status) {\n              case 401:\n                return throwError(() => new HttpError('Email/Password combination is incorrect', err.status));\n              case 500:\n                return throwError(() => new HttpError('Problem logging in, please try again', err.status));\n              case 0:\n              default:\n                return throwError(() => new HttpError('Problem logging in, please check network and try again', err.status));\n            };\n          },\n        ),\n        map(\n          (jwt: JWT) => {\n            return { message: 'Successfully logged in', jwt };\n          },\n        )\n      );\n  }\n\n  public logout(): Observable<any> {\n    return this.http.delete(this.config.logoutUrl)\n      .pipe(\n        HttpHelpers.retry(),\n        catchError(\n          (err) => {\n            switch (err.status) {\n              case 401:\n                return throwError(() => new HttpError('User wasn\\'t authed', err.status));\n              case 500:\n                return throwError(() => new HttpError('Problem logging out, please try again', err.status));\n              case 0:\n              default:\n                return throwError(() => new HttpError('Problem logging out, please check network and try again', err.status));\n            }\n          },\n        ),\n        map(\n          () => {\n            return { message: 'Successfully logged out' };\n          },\n        )\n      );\n  }\n\n  public forgotPassword(email: string): Observable<void> {\n    return this.http.post(\n      this.config.forgotPasswordUrl,\n      { email },\n    ).pipe(\n      HttpHelpers.retry(),\n      catchError(\n        (err: HttpErrorResponse, caught: Observable<void>) => {\n          switch (err.status) {\n            case 500:\n              return throwError(() => new HttpError('Problem sending otp, please try again', err.status));\n            case 0:\n            default:\n              return throwError(\n                () => new HttpError(\n                  (err.error?.message?.join && err.error?.message?.join(', ')) ?? err.error?.message ?? err?.message ?? 'Problem sending otp, please check network and try again',\n                  err.status,\n                ),\n              );\n          };\n        },\n      ),\n    );\n  }\n\n  public resetPassword(email: string, password: string, code: string): Observable<void> {\n    return this.http.put(\n      this.config.resetPasswordUrl,\n      {\n        code,\n        email,\n        password,\n      },\n    ).pipe(\n      HttpHelpers.retry(),\n      catchError(\n        (err: HttpErrorResponse, caught: Observable<void>) => {\n          switch (err.status) {\n            case 500:\n              return throwError(() => new HttpError('Problem reseting, please try again', err.status));\n            case 0:\n            default:\n              return throwError(\n                () => new HttpError(\n                  (err.error?.message?.join && err.error?.message?.join(', ')) ?? err.error?.message ?? err?.message ?? 'Problem reseting, please check network and try again',\n                  err.status,\n                ),\n              );\n          };\n        },\n      ),\n    );\n  }\n}\n","export default class AuthError extends Error { }\n","import { Inject, Injectable } from '@angular/core';\n\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport JWT from './jwt.interface';\nimport User from './user.interface';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport EnvironmentConfigService from './environment-config.service';\nimport JWTAndUser from './jwt-and-user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtAuthService {\n  private readonly storeId: string;\n  private static helper: JwtHelperService = new JwtHelperService();\n\n  constructor(@Inject(EnvironmentConfigService) private config: EnvironmentConfig,) {\n    this.storeId = config.tokenStoreId;\n  }\n\n  public getJWTAndUser(): JWTAndUser | null {\n    const jwt: JWT | null = this.get();\n\n    return !!jwt\n      ? {\n        jwt,\n        user: this.decode(jwt) as User,\n      } : null;\n  }\n\n  public getJWT(): JWT | null {\n    return this.get();\n    // const jwt: JWT | null = this.get();\n\n    // return !!jwt\n    //   ? {\n    //     access_token: jwt.access_token,\n    //     // expires_in: jwt.expires_in,\n    //     token_type: jwt.token_type,\n    //   } : null;\n  }\n\n  public getUser(): User | null {\n    const jwt: JWT | null = this.get();\n\n    return !!jwt ? this.decode(jwt) as User : null;\n  }\n\n  // public setUser(user: User): void {\n  //   const jwt = this.getJWTAndUser();\n\n  //   if (jwt) {\n  //     jwt.user = user;\n\n  //     this.set(jwt);\n  //   }\n  // }\n\n  public set(jwt: JWT): void {\n    localStorage.setItem(this.storeId, JSON.stringify(jwt));\n  }\n\n  private get(): JWT | null {\n    try {\n      const sessionItem: string | null = localStorage.getItem(this.storeId);\n\n      if (!!sessionItem) {\n        return JSON.parse(sessionItem) as JWT;\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public check(): boolean {\n    const jwt = this.getJWT();\n\n    if (!!jwt) {\n      return JwtAuthService.helper.isTokenExpired(jwt.access_token);\n    } else {\n      return true;\n    }\n  }\n\n  private decode(jwt: JWT): unknown | null {\n    try {\n      const accessToken: string | undefined\n        = jwt?.access_token;\n\n      return !!accessToken\n        ? JwtAuthService.helper.decodeToken(\n          accessToken,\n        )\n        : null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public clear(): void {\n    localStorage.removeItem(this.storeId);\n  }\n\n}\n","import { Component, Inject, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators, UntypedFormBuilder } from '@angular/forms';\n\nimport { AuthService } from '../auth.service';\nimport JWTAndUser from '../jwt-and-user.interface';\nimport { SubSink } from 'subsink';\n\n@Component({\n  selector: 'app-auth-modal',\n  templateUrl: './auth-modal.component.html',\n  styleUrls: ['./auth-modal.component.css']\n})\nexport class AuthModalComponent implements OnInit, OnDestroy {\n  private subs: SubSink = new SubSink();\n  \n  public loginForm = /*this.fb*/new UntypedFormBuilder().group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', Validators.required],\n  });\n  public isSubmitting = false;\n  public submitMessage!: string;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<AuthModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: JWTAndUser/*: DialogData*/,\n    private fb: UntypedFormBuilder,\n    private authManagerService: AuthService\n  ) { }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n  }\n\n  ngOnInit(): void { }\n\n  login(): void {\n    if (!this.loginForm.valid) {\n      return;\n    }\n\n    const loginFormValue = this.loginForm.value;\n    const { email, password } = loginFormValue;\n\n    this.isSubmitting = true;\n    this.submitMessage = 'Submitting...';\n\n    this.subs.sink = this.authManagerService.auth(email, password)\n      .subscribe(res => {\n        this.isSubmitting = false;\n        this.submitMessage = res.message;\n\n        this.dialogRef.close(res.jwt);\n      }, (err: any) => {\n        this.isSubmitting = false;\n\n        this.submitMessage = err.message;\n      });\n  }\n\n  get loginFormControls(): any {\n    return this.loginForm.controls;\n  }\n\n}\n","<h1 mat-dialog-title class=\"text-center font-semibold text-md !mb-4\">Login</h1>\n<div class=\"!pb-0\" mat-dialog-content>\n  <small *ngIf=\"submitMessage\">{{submitMessage}}</small>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n    <mat-form-field class=\"w-full\" appearance=\"fill\">\n      <mat-label>Email</mat-label>\n      <input autocomplete=\"email\" type=\"email\" formControlName=\"email\" [readonly]=\"isSubmitting\" matInput required />\n      <mat-error *ngIf=\"loginFormControls.email?.errors?.required\">Email is required.\n      </mat-error>\n      <mat-error *ngIf=\"loginFormControls.email?.errors?.email\">Email is invalid.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"w-full\" appearance=\"fill\">\n      <mat-label>Password</mat-label>\n      <input autocomplete=\"current-password\" type=\"password\" formControlName=\"password\" [readonly]=\"isSubmitting\"\n        matInput required />\n      <mat-error *ngIf=\"loginFormControls.password?.errors?.required\">Password is required.\n      </mat-error>\n    </mat-form-field>\n    <button hidden type=\"submit\">Submit</button>\n  </form>\n</div>\n<div mat-dialog-actions>\n  <div class=\"justify-between flex w-full p-4 pt-0\">\n    <button class=\"px-4 py-2\" mat-button matRipple [mat-dialog-close]=\"null\" aria-label=\"Cancel Button\">Cancel</button>\n    <button class=\"px-4 py-2 shadow-sm rounded-sm bg-blue-900 text-white hover:text-blue-900 hover:bg-white\" mat-button\n      matRipple [disabled]=\"!loginForm.valid || isSubmitting\" aria-label=\"Login Button\" (click)=\"login()\">Login</button>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n\nimport { AuthModalComponent } from './auth-modal/auth-modal.component';\nimport JWTAndUser from './jwt-and-user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthDialogService {\n  private static isInstanceOpen: boolean = false;\n  private static LoginSuccessSubject = new Subject<JWTAndUser | undefined>();\n\n  private static loginSuccessSubject$ = AuthDialogService.LoginSuccessSubject.asObservable();\n\n  constructor(private dialog: MatDialog) { }\n\n  open(): Promise<JWTAndUser> {\n    if (AuthDialogService.isInstanceOpen === true) {\n      return new Promise((resolve, reject) => {\n        AuthDialogService.loginSuccessSubject$.subscribe(\n          (jwt?: JWTAndUser) => {\n            !!jwt ? resolve(jwt) : reject(null);\n          },\n        );\n      });\n    }\n\n    AuthDialogService.isInstanceOpen = true;\n\n    return new Promise((resolve, reject) => {\n      const dialogRef = this.dialog.open(AuthModalComponent, {\n        restoreFocus: true,\n        disableClose: true,\n        data: {}\n      });\n\n      dialogRef.afterClosed().subscribe((jwt?: JWTAndUser) => {\n        jwt ? resolve(jwt) : reject(null);\n\n        AuthDialogService.LoginSuccessSubject.next(jwt);\n\n        AuthDialogService.isInstanceOpen = false;\n      });\n\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { JwtAuthService } from './jwt-auth.service';\nimport { AuthService } from './auth.service';\n\nimport { AuthDialogService } from './auth-dialog.service';\nimport User from './user.interface';\nimport JWT from './jwt.interface';\nimport AuthError from './auth-error';\nimport JWTAndUser from './jwt-and-user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthManagerService {\n  private redirectUrl?: string;\n\n  constructor(\n    private jwtAuthService: JwtAuthService,\n    private authService: AuthService,\n    private authDialogService: AuthDialogService\n  ) { }\n\n  /**\n   * Just check if there's auth\n   */\n  private isAuth(): boolean {\n    return !this.jwtAuthService.check();\n  }\n\n  public auth(email: string, password: string): Observable<{ message: string, jwt: JWT }> {\n    return this.authService.auth(email, password)\n      .pipe(\n        map(({ message, jwt }) => {\n          this.jwtAuthService.set(jwt);\n\n          return { message, jwt };\n        })\n      );\n  }\n\n  /**\n   *\n   * @param force if user not logged in, force authentication by showing login popup dialog\n   * @param dontCheckAuth If true, dont check if user is authed, just return last user auth data\n   */\n  public getAuthAndUser(force: boolean = true, dontCheckAuth: boolean = false): Promise<JWTAndUser> {\n    if (dontCheckAuth || this.isAuth()) {\n      const jwtAndUser: JWTAndUser | null = this.jwtAuthService.getJWTAndUser();\n\n      if (!!jwtAndUser) {\n        return Promise.resolve(jwtAndUser);\n      } else {\n        return Promise.reject(Error('No authed'));\n      }\n    } else if (force) {\n      return new Promise((resolve, reject) => {\n        this.authDialogService\n          .open()\n          .then((jwtAndUser) => {\n            this.jwtAuthService.set(jwtAndUser.jwt);\n\n            resolve(jwtAndUser);\n          }).catch((err) => reject(new AuthError(err?.message)));\n      });\n    } else {\n      return Promise.reject(new AuthError('User isnt authed'));\n    }\n  }\n\n  public getLoggedInUser(forceAuth: boolean = true): Promise<User> {\n    return new Promise((resolve, reject) => {\n      this.getAuthAndUser(forceAuth)\n        .then(({ user }) => resolve(user /* && jwtAndUser.user || this.JwtAuthService.getUser()*/))\n        .catch((err) => reject(err));\n    });\n  }\n\n  public getAuthorization(forceAuth: boolean = true): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.getAuthAndUser(forceAuth)\n        .then(({ jwt: { access_token, token_type } }) => resolve(`${token_type} ${access_token}`))\n        .catch((err) => reject(err));\n    });\n  }\n\n  // public updateUser(user: any): void {\n  //   this.JwtAuthService.setUser(user);\n  // }\n\n  // public logout(): void {\n  //   return this.JwtAuthService.clear();\n  // }\n\n  public logout(): Observable<any> {\n    return this.authService.logout()\n      .pipe(\n        map(({ message }) => {\n          this.jwtAuthService.clear();\n\n          return { message };\n        })\n      );\n  }\n\n  public setRedirectUrl(url: string): void {\n    this.redirectUrl = url;\n  }\n\n  public getRedirectUrl(): string | undefined {\n    return this.redirectUrl;\n  }\n\n  public resetRedirectUrl(): void {\n    this.redirectUrl = undefined;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpRequest, HttpInterceptor, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { AuthManagerService } from './auth-manager.service';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport EnvironmentConfigService from './environment-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(\n    @Inject(EnvironmentConfigService) private readonly config: EnvironmentConfig,\n    private readonly authManagerService: AuthManagerService\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (\n      // ['login', 'forgot-password', 'reset-password'].includes(req.url.substring(req.url.lastIndexOf('/') + 1))\n      [this.config.loginUrl, this.config.forgotPasswordUrl, this.config.resetPasswordUrl].includes(req.url)\n      || req.headers.get(\"skip-interceptors\")\n    ) {\n      return next.handle(req);\n    }\n\n    return from(this.authManagerService.getAuthorization())\n      .pipe(\n        switchMap((authToken) => {\n          // do the changes here\n          const authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n          return next.handle(authReq);\n        }),\n        catchError((e) => {\n          return throwError(e && e.status ? e : new HttpErrorResponse({ status: 401 }));\n        })\n      );\n  }\n}\n","/* \"Barrel\" of Http Interceptors */\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n// import { AuthInterceptorService } from 'shared/services/auth-http-interceptor/auth-interceptor.service';\n\nimport { AuthInterceptorService as JWTAuthInterceptorService } from './auth-interceptor.service';\n\n/** Http interceptor providers in outside-in order */\nexport const authHttpInterceptorProvider = [\n  { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptorService, multi: true },\n  // { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true },\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthManagerService } from './auth-manager.service';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport EnvironmentConfigService from './environment-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthManagerGuard implements CanActivate, CanActivateChild {\n  constructor(\n    @Inject(EnvironmentConfigService) private config: EnvironmentConfig,\n    private authManagerService: AuthManagerService,\n    private router: Router,\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const url: string = state.url;\n\n    return this.checkLogin(url);\n  }\n\n  checkLogin(url: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.authManagerService.getLoggedInUser().then((user) => {\n        // Pages that only super admin can access\n        const superAdminRoutes: string[] = this.config.superAdminPages || [];\n\n        if (superAdminRoutes.some((route: string) => url.startsWith(`/${route}`)) && !user.isSuperAdmin) {\n          reject(false);\n\n          throw Error('Only super admins have access to this page!');\n        } else {\n          resolve(true);\n        }\n      }).catch(() => {\n        // redirect to me\n        this.router.navigate(['auth']);\n\n        reject(false);\n      });\n    });\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { authHttpInterceptorProvider } from './auth-http-interceptor-provider';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { AuthModalComponent } from './auth-modal/auth-modal.component';\nimport { AuthManagerService } from './auth-manager.service';\nimport { AuthService } from './auth.service';\nimport { UserService } from './user.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { AuthDialogService } from './auth-dialog.service';\nimport { AuthInterceptorService } from './auth-interceptor.service';\nimport { AuthManagerGuard } from './auth-manager.guard';\nimport { EnvironmentConfig } from './environment-config.interface';\nimport EnvironmentConfigService from './environment-config.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AuthModalComponent,\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    MatDialogModule,\n    MatRippleModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  providers: [],\n  exports: [],\n})\nexport class JwtAuthModule { \n  static forRoot(config: EnvironmentConfig): ModuleWithProviders<JwtAuthModule>{\n    return {\n      ngModule: JwtAuthModule,\n      providers: [\n        authHttpInterceptorProvider,\n        AuthInterceptorService,\n        AuthManagerService,\n        JwtAuthService,\n        AuthDialogService,\n        JwtHelperService,\n        AuthManagerGuard,\n        AuthService,\n        UserService,\n        {\n          provide: EnvironmentConfigService,\n          useValue: config,\n        }\n      ],\n    }\n  }\n}\n","/*\n * Public API Surface of ngx-jwt-auth\n */\n\nexport * from './lib/environment-config.interface';\nexport * from './lib/jwt.interface';\nexport * from './lib/user.service';\nexport * from './lib/auth.service';\nexport * from './lib/auth-error';\nexport * from './lib/auth-http-interceptor-provider';\nexport * from './lib/auth-manager.service';\nexport * from './lib/auth-manager.guard';\nexport * from './lib/jwt-auth.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3.AuthService","i1","i1.JwtAuthService","i2.AuthService","i3.AuthDialogService","i1.AuthManagerService","JWTAuthInterceptorService","i2"],"mappings":"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"}